{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pemrograman Berorientasi Objek Intro Pemrograman berorientasi Objek ( PBO ) Pada tutorial Pemrograman Berorientasi Objek ini terdapat 4 bahasa yang Part Judul Deskripsi Link Slide 1 Konsep Pemrograman Berorientasi Objek Bagaimana Neural Network Bekerja A A","title":"Home"},{"location":"#pemrograman-berorientasi-objek","text":"","title":"Pemrograman Berorientasi Objek"},{"location":"#intro","text":"Pemrograman berorientasi Objek ( PBO ) Pada tutorial Pemrograman Berorientasi Objek ini terdapat 4 bahasa yang Part Judul Deskripsi Link Slide 1 Konsep Pemrograman Berorientasi Objek Bagaimana Neural Network Bekerja A A","title":"Intro"},{"location":"01_konsep_pemrograman_berorientasi_objek/","text":"Pendekatan Desain dan Program Berorientasi Objek Pembukaan Pemrograman Berorientasi Objek (Object Oriented Programming) seperti terdeskripsikan pada namanya merupakan metode pemrograman yang menggunakan objek. Pemrograman Berorientasi Objek bertujuan untuk menyatukan kedalam suatu class , data dan fungsi yang beroperasi pada konteks class tersebut Kelebihan Pendekatan Desain dan Program Berorientasi Objek memiliki kelebihan diantaranya : Tidak terjadi perulangan pembuatan fungsi yang sama pada code / Keep Java code DRY (Don\u2019t Repeat Yourself) Karena setiap operasi / tipe data terpisah dan di wakilkan oleh class, maka tidak code / program dibuat berulang. Program lebih terstruktur secara rapi Karena setiap operasi terpisah yang diwakili oleh class, maka tidak ada operasi-operasi yang tercampur. Cepat dan Mudah untuk di eksekusi (dari sisi compile program) Tidak adanya Serangkaian Code yang memiliki fungsi yang sama disatukan dan dipisahkan sebagai fungsi Memudahkan Code untuk dikelola, dimodifikasi, dan didebug Memungkinkan untuk code yang dibuat untuk sebuah program dapat digunakan untuk program yang lainnya tanpa harus membuat code baru. Pertanyaan Berikan Contoh Lain dari kelebihan pengaplikasian Pemrograman Berorientasi Objek pada program yang kita buat. Konsep Struktur Class Seperti di jelaskan pada pembukaan, Pemrograman Berorientasi Objek di applikasikan pada Untuk memudahkan kita untuk mengerti tentang konsep dari Pemrograman Berorientasi Objek, Pendekatan Pemrogramman Sequensial Pendekatan Pemrogramman Berorientasi Objek Class Objek Merupakan sebuah unit dasar dari Pemrograman Berorientasi Objek dan merepresentasikan entitas dunia nyata (real life entity). Sebuah objek adalah Data Abstraction Inheritance Inheritance Merupakan teknik mewariskan fungsi/method yang ada di satu class ke class lainnya . Pada Inheritance terdiri dari 2 Kateogri. 1. Sub Class (Child) Polymorphism Encapsulation Abstraction Latihan Diberikan","title":"01. Konsep Pemrograman Berorientasi Objek"},{"location":"01_konsep_pemrograman_berorientasi_objek/#pendekatan-desain-dan-program-berorientasi-objek","text":"","title":"Pendekatan Desain dan Program Berorientasi Objek"},{"location":"01_konsep_pemrograman_berorientasi_objek/#pembukaan","text":"Pemrograman Berorientasi Objek (Object Oriented Programming) seperti terdeskripsikan pada namanya merupakan metode pemrograman yang menggunakan objek. Pemrograman Berorientasi Objek bertujuan untuk menyatukan kedalam suatu class , data dan fungsi yang beroperasi pada konteks class tersebut","title":"Pembukaan"},{"location":"01_konsep_pemrograman_berorientasi_objek/#kelebihan","text":"Pendekatan Desain dan Program Berorientasi Objek memiliki kelebihan diantaranya : Tidak terjadi perulangan pembuatan fungsi yang sama pada code / Keep Java code DRY (Don\u2019t Repeat Yourself) Karena setiap operasi / tipe data terpisah dan di wakilkan oleh class, maka tidak code / program dibuat berulang. Program lebih terstruktur secara rapi Karena setiap operasi terpisah yang diwakili oleh class, maka tidak ada operasi-operasi yang tercampur. Cepat dan Mudah untuk di eksekusi (dari sisi compile program) Tidak adanya Serangkaian Code yang memiliki fungsi yang sama disatukan dan dipisahkan sebagai fungsi Memudahkan Code untuk dikelola, dimodifikasi, dan didebug Memungkinkan untuk code yang dibuat untuk sebuah program dapat digunakan untuk program yang lainnya tanpa harus membuat code baru. Pertanyaan Berikan Contoh Lain dari kelebihan pengaplikasian Pemrograman Berorientasi Objek pada program yang kita buat.","title":"Kelebihan"},{"location":"01_konsep_pemrograman_berorientasi_objek/#konsep","text":"Struktur Class Seperti di jelaskan pada pembukaan, Pemrograman Berorientasi Objek di applikasikan pada Untuk memudahkan kita untuk mengerti tentang konsep dari Pemrograman Berorientasi Objek, Pendekatan Pemrogramman Sequensial Pendekatan Pemrogramman Berorientasi Objek","title":"Konsep"},{"location":"01_konsep_pemrograman_berorientasi_objek/#class","text":"","title":"Class"},{"location":"01_konsep_pemrograman_berorientasi_objek/#objek","text":"Merupakan sebuah unit dasar dari Pemrograman Berorientasi Objek dan merepresentasikan entitas dunia nyata (real life entity). Sebuah objek adalah","title":"Objek"},{"location":"01_konsep_pemrograman_berorientasi_objek/#data-abstraction","text":"","title":"Data Abstraction"},{"location":"01_konsep_pemrograman_berorientasi_objek/#inheritance","text":"Inheritance Merupakan teknik mewariskan fungsi/method yang ada di satu class ke class lainnya . Pada Inheritance terdiri dari 2 Kateogri. 1. Sub Class (Child)","title":"Inheritance"},{"location":"01_konsep_pemrograman_berorientasi_objek/#polymorphism","text":"","title":"Polymorphism"},{"location":"01_konsep_pemrograman_berorientasi_objek/#encapsulation","text":"","title":"Encapsulation"},{"location":"01_konsep_pemrograman_berorientasi_objek/#abstraction","text":"","title":"Abstraction"},{"location":"01_konsep_pemrograman_berorientasi_objek/#latihan","text":"Diberikan","title":"Latihan"},{"location":"02_praktik_pendekatan_pbo/","text":"Oleh: Bassamtiano Slide : Pada bagian ini akan dipelajari bagaimana pengimplementasian dasar konsep pemrograman berorientasi objek. Pada bagian ini kita akan mempelajari pembuatan dan penggunaan class. serta Pembukaan Pada Pendekatan Pemrograman Berbasis Objek, Line Program di bagi bagi menjadi. Pendekatan Pemrograman Berorientasi Objek memiliki target untuk mengimplementasikan objek Class Class adalah sebuah tipe data yang di definsikan oleh User (programmer) memiliki 2 elemen yaitu data dan function. Kedua elemen tersebut dapat di akses dan digunaan dengan membuat permintaan pada Class tersebut. Class merepresentasikan sebuah kumpulan Test property dan atau methods / function (metode) untuk merepresentasikan sebuah tipe objek yang memiliki properti / identitas yang semuanya sama. Struktur Class Contoh : Semisal terdapat sebuah Class dari Kendaraan. Pada kendaraan terdapat berbagai merek dan nama yang berbeda, namun semuanya memiliki kesamaan properti yang sama. Seperti contohnya jumlah roda, warna, jumlah pintu, kecepatan maksimum, tipe transmisi, dan sebagainya. Disini, Kendaraan adalah class dan jumlah roda, warna, jumlah pintu, kecepatan maksimum adalah properti nya. Dapat di simpulkan class seperti sebuah blueprint / kerangka untuk sebuah objek. Java Kotlin C# C++ Visual Basic Python 1 2 3 4 5 package com.pbo.myproject ; class MyClass { } class MyClass { } 1 2 3 4 5 6 using System ; namespace myproject { class MyClass { } } 1 2 Class MyClass { } 1 2 3 Module MyClass End Module 1 class MyClass : Data / Variable Global Data / Variable Global merupakan variable yang dapat di akses method di dalam class. Seperti di jelaskan bahwa class memiliki bagian Java C# Visual Basic Python 1 2 3 4 5 package com.pbo.myproject ; class MyClass { Int } using System ; namespace myproject { class MyClass { static void main ( String [] args ) { Console . WriteLine ( \"Hello World!\" ) } } } Module MyClass Sub Main ( args As String ()) Console . WriteLine ( \"Hello World!\" ) End Sub End Module class MyClass : def main ( self ): print ( \"Hello World!\" ) if __name__ == '__main__' : MyClass . main () Function / Method Function merupakan bagian dari class dimana Java C# Visual Basic Python 1 2 3 4 5 6 7 package com.pbo.myproject ; class MyClass { public static void main ( String [] args ) { System . out . println ( \"Hello World!\" ) } } using System ; namespace myproject { class MyClass { static void main ( String [] args ) { Console . WriteLine ( \"Hello World!\" ) } } } Module MyClass Sub Main ( args As String ()) Console . WriteLine ( \"Hello World!\" ) End Sub End Module class MyClass : def main ( self ): print ( \"Hello World!\" ) if __name__ == '__main__' : MyClass . main () Info Python merupakan bahasa pemrograman yang mengharuskan identasi / posisi setiap baris sesuai dengan levelnya Class Constructor Constructor merupakan method yang pertama kali di eksekusi saat class di deklarasikan. Parameters Java C# Visual Basic Python 1 2 3 4 5 6 7 8 9 10 11 12 package com.pbo.myproject ; class MyClass { public static void main ( String [] args ) { System . out . println ( \"Hello World!\" ) } public void hitung ( int harga_satuan , int jumlah_beli ) { int total_harga = harga_satuan * jumlah_beli System . out . println ( total_harga ) } } using System ; namespace myproject { class MyClass { static void main ( String [] args ) { Console . WriteLine ( \"Hello World!\" ) } public void hitung ( int harga_satuan , int jumlah_beli ) { int total_harga = harga_satuan * total_beli Console . WriteLine ( total_harga ) } } } Module MyClass Sub Main ( args As String ()) Console . WriteLine ( \"Hello World!\" ) End Sub Sub Hitung ( Dim harga_satuan , Dim jumlah_beli ) Dim total_harga = harga_satuan * total_beli Console . WriteLine ( total_harga ) End Sub End Module class MyClass : def main ( self ): print ( \"Hello World!\" ) def hitung ( self , harga_satuan , jumlah_beli ): total_harga = harga_satuan * jumlah_beli print ( total_harga ) if __name__ == '__main__' : MyClass . main () Return Type aa Komunikasi antar Method aa Variables Variable merupakan bagian dari method yang merepresentasikan suatu nilai. Nilai-nilai tersebut memiliki tipe data. Setiap tipe data memiliki kegunaan yang berbeda. Latihan","title":"02. Praktik Pendekatan PBO"},{"location":"02_praktik_pendekatan_pbo/#pembukaan","text":"Pada Pendekatan Pemrograman Berbasis Objek, Line Program di bagi bagi menjadi. Pendekatan Pemrograman Berorientasi Objek memiliki target untuk mengimplementasikan objek","title":"Pembukaan"},{"location":"02_praktik_pendekatan_pbo/#class","text":"Class adalah sebuah tipe data yang di definsikan oleh User (programmer) memiliki 2 elemen yaitu data dan function. Kedua elemen tersebut dapat di akses dan digunaan dengan membuat permintaan pada Class tersebut. Class merepresentasikan sebuah kumpulan Test property dan atau methods / function (metode) untuk merepresentasikan sebuah tipe objek yang memiliki properti / identitas yang semuanya sama. Struktur Class Contoh : Semisal terdapat sebuah Class dari Kendaraan. Pada kendaraan terdapat berbagai merek dan nama yang berbeda, namun semuanya memiliki kesamaan properti yang sama. Seperti contohnya jumlah roda, warna, jumlah pintu, kecepatan maksimum, tipe transmisi, dan sebagainya. Disini, Kendaraan adalah class dan jumlah roda, warna, jumlah pintu, kecepatan maksimum adalah properti nya. Dapat di simpulkan class seperti sebuah blueprint / kerangka untuk sebuah objek. Java Kotlin C# C++ Visual Basic Python 1 2 3 4 5 package com.pbo.myproject ; class MyClass { } class MyClass { } 1 2 3 4 5 6 using System ; namespace myproject { class MyClass { } } 1 2 Class MyClass { } 1 2 3 Module MyClass End Module 1 class MyClass :","title":"Class"},{"location":"02_praktik_pendekatan_pbo/#data-variable-global","text":"Data / Variable Global merupakan variable yang dapat di akses method di dalam class. Seperti di jelaskan bahwa class memiliki bagian Java C# Visual Basic Python 1 2 3 4 5 package com.pbo.myproject ; class MyClass { Int } using System ; namespace myproject { class MyClass { static void main ( String [] args ) { Console . WriteLine ( \"Hello World!\" ) } } } Module MyClass Sub Main ( args As String ()) Console . WriteLine ( \"Hello World!\" ) End Sub End Module class MyClass : def main ( self ): print ( \"Hello World!\" ) if __name__ == '__main__' : MyClass . main ()","title":"Data / Variable Global"},{"location":"02_praktik_pendekatan_pbo/#function-method","text":"Function merupakan bagian dari class dimana Java C# Visual Basic Python 1 2 3 4 5 6 7 package com.pbo.myproject ; class MyClass { public static void main ( String [] args ) { System . out . println ( \"Hello World!\" ) } } using System ; namespace myproject { class MyClass { static void main ( String [] args ) { Console . WriteLine ( \"Hello World!\" ) } } } Module MyClass Sub Main ( args As String ()) Console . WriteLine ( \"Hello World!\" ) End Sub End Module class MyClass : def main ( self ): print ( \"Hello World!\" ) if __name__ == '__main__' : MyClass . main () Info Python merupakan bahasa pemrograman yang mengharuskan identasi / posisi setiap baris sesuai dengan levelnya","title":"Function / Method"},{"location":"02_praktik_pendekatan_pbo/#class-constructor","text":"Constructor merupakan method yang pertama kali di eksekusi saat class di deklarasikan.","title":"Class Constructor"},{"location":"02_praktik_pendekatan_pbo/#parameters","text":"Java C# Visual Basic Python 1 2 3 4 5 6 7 8 9 10 11 12 package com.pbo.myproject ; class MyClass { public static void main ( String [] args ) { System . out . println ( \"Hello World!\" ) } public void hitung ( int harga_satuan , int jumlah_beli ) { int total_harga = harga_satuan * jumlah_beli System . out . println ( total_harga ) } } using System ; namespace myproject { class MyClass { static void main ( String [] args ) { Console . WriteLine ( \"Hello World!\" ) } public void hitung ( int harga_satuan , int jumlah_beli ) { int total_harga = harga_satuan * total_beli Console . WriteLine ( total_harga ) } } } Module MyClass Sub Main ( args As String ()) Console . WriteLine ( \"Hello World!\" ) End Sub Sub Hitung ( Dim harga_satuan , Dim jumlah_beli ) Dim total_harga = harga_satuan * total_beli Console . WriteLine ( total_harga ) End Sub End Module class MyClass : def main ( self ): print ( \"Hello World!\" ) def hitung ( self , harga_satuan , jumlah_beli ): total_harga = harga_satuan * jumlah_beli print ( total_harga ) if __name__ == '__main__' : MyClass . main ()","title":"Parameters"},{"location":"02_praktik_pendekatan_pbo/#return-type","text":"aa","title":"Return Type"},{"location":"02_praktik_pendekatan_pbo/#komunikasi-antar-method","text":"aa","title":"Komunikasi antar Method"},{"location":"02_praktik_pendekatan_pbo/#variables","text":"Variable merupakan bagian dari method yang merepresentasikan suatu nilai. Nilai-nilai tersebut memiliki tipe data. Setiap tipe data memiliki kegunaan yang berbeda.","title":"Variables"},{"location":"02_praktik_pendekatan_pbo/#latihan","text":"","title":"Latihan"},{"location":"03.1_tipe_data/","text":"Pendahuluan Pada setiap bahasa pemrograman terdapat berbagai tipe bahasa pemrograman seperti Variable merupakan penampung untuk menyimpan data nilai. Info Pada Bahasa Pemrograman Kotlin Terdapat 2 golongan variable yaitu val dan var . var digunakan saat sebuah variable isinya dapat di rubah / di modifikasi dan val digunakan saat sebuah variable isinya tidak dapat di rubah Tipe Data Tipe data terdiri dari 5 kelompok. Number Character Booleans String, dan Array Number Number / Angka dibagi menjadi 2 kelompok : Integer Menyimpan seluruh angka, positif atau negatif (seperti 100 atau -100) tanpa desimal. Byte Integer Floating point Character Character / Char merupakan tipe data yang menyimpan sebuah karakter. Sebuah nilai char harus di antara tanda petik 1. Booleans Boolean merupakan tipe data yang hanya dapat menerima nilai true (benar) atau false (salah) . Boolean biasanya digunakan untuk pengujian kondisi. String String merupakan tipe data yang menyimpan sebuah rangkaian dari karakter (text) . Nilai string harus di antara tanda petik 2. Array Array merupakan tipe data yang digunakan untuk menyipan beberapa nilai dari sebuah variable, sebagai pengganti pembuatan variable yang terpisah untuk setiap nilai. Array akan lebih dalam dibahas di Chapter Array Konversi Tipe Data Konversi tipe data di lakukan saat sebuah nilai dari sebuah variable ingin di konversikan ke tipe data lain. Contoh Apabila ingin mendapatkan variable bilangan bulat namun nilai nya berasal dari variable dengan tipe data float yang merupakan bilangan desimal. Untuk mendapatkan nilai bilangan bulat dari nilai bilangan desimal tersebut dilakukan konversi dari tipe data float ke integer. Operator Operator digunaakn untuk melakukan operasi Nilai di sebut sebagai sebuah operand, dan operasi (yang akan di lakukan diantara dua operand) di definisikan sebagai operator. Latihan","title":"03. Variable Tipe Data"},{"location":"03.1_tipe_data/#pendahuluan","text":"Pada setiap bahasa pemrograman terdapat berbagai tipe bahasa pemrograman seperti Variable merupakan penampung untuk menyimpan data nilai. Info Pada Bahasa Pemrograman Kotlin Terdapat 2 golongan variable yaitu val dan var . var digunakan saat sebuah variable isinya dapat di rubah / di modifikasi dan val digunakan saat sebuah variable isinya tidak dapat di rubah","title":"Pendahuluan"},{"location":"03.1_tipe_data/#tipe-data","text":"Tipe data terdiri dari 5 kelompok. Number Character Booleans String, dan Array","title":"Tipe Data"},{"location":"03.1_tipe_data/#number","text":"Number / Angka dibagi menjadi 2 kelompok : Integer Menyimpan seluruh angka, positif atau negatif (seperti 100 atau -100) tanpa desimal. Byte Integer Floating point","title":"Number"},{"location":"03.1_tipe_data/#character","text":"Character / Char merupakan tipe data yang menyimpan sebuah karakter. Sebuah nilai char harus di antara tanda petik 1.","title":"Character"},{"location":"03.1_tipe_data/#booleans","text":"Boolean merupakan tipe data yang hanya dapat menerima nilai true (benar) atau false (salah) . Boolean biasanya digunakan untuk pengujian kondisi.","title":"Booleans"},{"location":"03.1_tipe_data/#string","text":"String merupakan tipe data yang menyimpan sebuah rangkaian dari karakter (text) . Nilai string harus di antara tanda petik 2.","title":"String"},{"location":"03.1_tipe_data/#array","text":"Array merupakan tipe data yang digunakan untuk menyipan beberapa nilai dari sebuah variable, sebagai pengganti pembuatan variable yang terpisah untuk setiap nilai. Array akan lebih dalam dibahas di Chapter Array","title":"Array"},{"location":"03.1_tipe_data/#konversi-tipe-data","text":"Konversi tipe data di lakukan saat sebuah nilai dari sebuah variable ingin di konversikan ke tipe data lain. Contoh Apabila ingin mendapatkan variable bilangan bulat namun nilai nya berasal dari variable dengan tipe data float yang merupakan bilangan desimal. Untuk mendapatkan nilai bilangan bulat dari nilai bilangan desimal tersebut dilakukan konversi dari tipe data float ke integer.","title":"Konversi Tipe Data"},{"location":"03.1_tipe_data/#operator","text":"Operator digunaakn untuk melakukan operasi Nilai di sebut sebagai sebuah operand, dan operasi (yang akan di lakukan diantara dua operand) di definisikan sebagai operator.","title":"Operator"},{"location":"03.1_tipe_data/#latihan","text":"","title":"Latihan"},{"location":"03.2_operator/","text":"Pendahuluan Pada setiap bahasa pemrograman terdapat berbagai tipe bahasa pemrograman seperti Variable merupakan penampung untuk menyimpan data nilai. Info Pada Bahasa Pemrograman Kotlin Terdapat 2 golongan variable yaitu val dan var . var digunakan saat sebuah variable isinya dapat di rubah / di modifikasi dan val digunakan saat sebuah variable isinya tidak dapat di rubah Tipe Data Tipe data terdiri dari 5 kelompok. Number Character Booleans String, dan Array Number Number / Angka dibagi menjadi 2 kelompok : Integer Menyimpan seluruh angka, positif atau negatif (seperti 100 atau -100) tanpa desimal. Byte Integer Floating point Character Character / Char merupakan tipe data yang menyimpan sebuah karakter. Sebuah nilai char harus di antara tanda petik 1. Booleans Boolean merupakan tipe data yang hanya dapat menerima nilai true (benar) atau false (salah) . Boolean biasanya digunakan untuk pengujian kondisi. String String merupakan tipe data yang menyimpan sebuah rangkaian dari karakter (text) . Nilai string harus di antara tanda petik 2. Array Array merupakan tipe data yang digunakan untuk menyipan beberapa nilai dari sebuah variable, sebagai pengganti pembuatan variable yang terpisah untuk setiap nilai. Array akan lebih dalam dibahas di Chapter Array Konversi Tipe Data Konversi tipe data di lakukan saat sebuah nilai dari sebuah variable ingin di konversikan ke tipe data lain. Contoh Apabila ingin mendapatkan variable bilangan bulat namun nilai nya berasal dari variable dengan tipe data float yang merupakan bilangan desimal. Untuk mendapatkan nilai bilangan bulat dari nilai bilangan desimal tersebut dilakukan konversi dari tipe data float ke integer. Latihan","title":"03.2 operator"},{"location":"03.2_operator/#pendahuluan","text":"Pada setiap bahasa pemrograman terdapat berbagai tipe bahasa pemrograman seperti Variable merupakan penampung untuk menyimpan data nilai. Info Pada Bahasa Pemrograman Kotlin Terdapat 2 golongan variable yaitu val dan var . var digunakan saat sebuah variable isinya dapat di rubah / di modifikasi dan val digunakan saat sebuah variable isinya tidak dapat di rubah","title":"Pendahuluan"},{"location":"03.2_operator/#tipe-data","text":"Tipe data terdiri dari 5 kelompok. Number Character Booleans String, dan Array","title":"Tipe Data"},{"location":"03.2_operator/#number","text":"Number / Angka dibagi menjadi 2 kelompok : Integer Menyimpan seluruh angka, positif atau negatif (seperti 100 atau -100) tanpa desimal. Byte Integer Floating point","title":"Number"},{"location":"03.2_operator/#character","text":"Character / Char merupakan tipe data yang menyimpan sebuah karakter. Sebuah nilai char harus di antara tanda petik 1.","title":"Character"},{"location":"03.2_operator/#booleans","text":"Boolean merupakan tipe data yang hanya dapat menerima nilai true (benar) atau false (salah) . Boolean biasanya digunakan untuk pengujian kondisi.","title":"Booleans"},{"location":"03.2_operator/#string","text":"String merupakan tipe data yang menyimpan sebuah rangkaian dari karakter (text) . Nilai string harus di antara tanda petik 2.","title":"String"},{"location":"03.2_operator/#array","text":"Array merupakan tipe data yang digunakan untuk menyipan beberapa nilai dari sebuah variable, sebagai pengganti pembuatan variable yang terpisah untuk setiap nilai. Array akan lebih dalam dibahas di Chapter Array","title":"Array"},{"location":"03.2_operator/#konversi-tipe-data","text":"Konversi tipe data di lakukan saat sebuah nilai dari sebuah variable ingin di konversikan ke tipe data lain. Contoh Apabila ingin mendapatkan variable bilangan bulat namun nilai nya berasal dari variable dengan tipe data float yang merupakan bilangan desimal. Untuk mendapatkan nilai bilangan bulat dari nilai bilangan desimal tersebut dilakukan konversi dari tipe data float ke integer.","title":"Konversi Tipe Data"},{"location":"03.2_operator/#latihan","text":"","title":"Latihan"},{"location":"04_conditional/","text":"Pendahuluan Operator Kondisi merupakan operator matematis yang membandingkan dua operand Java Kotlin C# C++ Visual Basic Python 1 2 3 4 5 package com.pbo.myproject ; class MyClass { } class MyClass { } 1 2 3 4 5 6 using System ; namespace myproject { class MyClass { } } 1 2 Class MyClass { } 1 2 3 Module MyClass End Module 1 class MyClass : Tipe Operator Kondisi Berikut ini beberapa tipe operator kondisi if If digunakan untuk menspesifikasikan sebuah blok kode dapat di eksekusi saat kondisinya adalah true / (benar) Switch Info Pada Bahasa Pemrograman Kotlin switch digantikan dengan when","title":"04. Operator Kondisi"},{"location":"04_conditional/#pendahuluan","text":"Operator Kondisi merupakan operator matematis yang membandingkan dua operand Java Kotlin C# C++ Visual Basic Python 1 2 3 4 5 package com.pbo.myproject ; class MyClass { } class MyClass { } 1 2 3 4 5 6 using System ; namespace myproject { class MyClass { } } 1 2 Class MyClass { } 1 2 3 Module MyClass End Module 1 class MyClass :","title":"Pendahuluan"},{"location":"04_conditional/#tipe-operator-kondisi","text":"Berikut ini beberapa tipe operator kondisi","title":"Tipe Operator Kondisi"},{"location":"04_conditional/#if","text":"If digunakan untuk menspesifikasikan sebuah blok kode dapat di eksekusi saat kondisinya adalah true / (benar)","title":"if"},{"location":"04_conditional/#switch","text":"Info Pada Bahasa Pemrograman Kotlin switch digantikan dengan when","title":"Switch"},{"location":"05_loops/","text":"Pendahuluan for while do... while","title":"05. Operator Perulangan"},{"location":"05_loops/#pendahuluan","text":"","title":"Pendahuluan"},{"location":"05_loops/#for","text":"","title":"for"},{"location":"05_loops/#while","text":"","title":"while"},{"location":"05_loops/#do-while","text":"","title":"do... while"},{"location":"06_array_list/","text":"Pendahuluan","title":"06.1. Array : Intro"},{"location":"06_array_list/#pendahuluan","text":"","title":"Pendahuluan"},{"location":"07_konsep_pemodelan/","text":"class method constructor variable global access level (private public protected)","title":"07. Konsep Pemodelan"},{"location":"08_konsep_pemodelan/","text":"encapsulation, polymorphism, inheritance","title":"08."},{"location":"09_konsep_pemodelan/","text":"abstract dan interface","title":"09."},{"location":"10_error_handling/","text":"","title":"10. Penanganan Error"},{"location":"11_multithreading/","text":"","title":"11. Multi Threading"},{"location":"12_io/","text":"","title":"12. Input dan Output I/O"},{"location":"13_enkripsi_tradisional/","text":"","title":"13. Enkripsi"},{"location":"14_gui_basic/","text":"","title":"14. GUI Basic"},{"location":"15_gui_database/","text":"","title":"15. GUI Database"},{"location":"array/array_1/","text":"test","title":"06.2. Array"}]}